version: "3"
services:
  reverse-proxy:
    image: traefik:v2.3
    command:
      - "--entryPoints.web.address=:80"
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  redis:
    image: redis:alpine
    command:
    - redis-server
    - /usr/local/etc/redis/redis.conf
    ports:
    - "6379:6379"
    volumes:
    - redis_data:/data
    - ./redis.conf:/usr/local/etc/redis/redis.conf
  backend:
    build: ./app
    restart: always
    environment:
      PORT: ${PORT}
      GIN_MODE: ${GIN_MODE}
      REDIS_ADDR: ${REDIS_ADDR}
      REDIS_PASSWD: ${REDIS_PASSWD}
      REDIS_CACHE_EXPIRATION: ${REDIS_CACHE_EXPIRATION}
      MAX_VISIT_COUNT: ${MAX_VISIT_COUNT}
    ports:
      - "${PORT}"
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`dcard.homework`) && PathPrefix(`/hello`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.routers.backend.service=backend-service"
      - "traefik.http.services.backend-service.loadbalancer.server.port=${PORT}"
      - "traefik.http.middlewares.api-ratelimit.ratelimit.average=1000"
      - "traefik.http.middlewares.api-ratelimit.ratelimit.period=60m"
      # maximum number of requests allowed to go through in the same arbitrarily small period of time
      - "traefik.http.middlewares.api-ratelimit.ratelimit.burst=50"
volumes:
  redis_data: